package planning;

import java.util.*;
import java.sql.*;
import java.io.*;
import javax.sql.*;
import javax.servlet.*;
import javax.servlet.http.*;
import javax.naming.*;
import javax.naming.directory.*;
import com.lowagie.text.Document;
import com.lowagie.text.DocumentException;
import com.lowagie.text.Paragraph;
import com.lowagie.text.Chunk;
import com.lowagie.text.Phrase;
import com.lowagie.text.Element;
import com.lowagie.text.FontFactory;
import com.lowagie.text.Font;
import com.lowagie.text.html.HtmlWriter;
import com.lowagie.text.pdf.PdfWriter;
import com.lowagie.text.rtf.RtfWriter2;
import com.lowagie.text.Rectangle;
import com.lowagie.text.pdf.PdfPTable;
import com.lowagie.text.pdf.PdfPCell;
import com.lowagie.text.pdf.PdfContentByte;
import com.lowagie.text.pdf.BaseFont;
import com.lowagie.text.Image;
import org.apache.log4j.Logger;

/**
 * A form to select between a number of options to generate data
 * for MS Mail merge.
 *
 * @author Walid Sibo
 * @version %I%, %G%
 */

public class SendOut extends HttpServlet {

    String url="",url2="", attorneyServiceUrl = "";
	static Logger logger = Logger.getLogger(SendOut.class);
    boolean debug = false;
	static final long serialVersionUID = 1136L;
	//
	public void doPost(HttpServletRequest req, 
					   HttpServletResponse res) 
		throws ServletException, IOException{
		doGet(req, res);
	}
    public void doGet(HttpServletRequest req, 
					   HttpServletResponse res) 
		throws ServletException, IOException{
		res.setContentType("text/html");

		String id="", date_from="",date_to="", process_date="";
	    
		String name, value, message="", action="";
		Enumeration<String> values = req.getParameterNames();
		if(url.equals("")){
			url    = getServletContext().getInitParameter("url");
			url2   = getServletContext().getInitParameter("url2");
			String str = getServletContext().getInitParameter("debug");
			if(str != null && str.equals("true")) debug = true;
			str = getServletContext().getInitParameter("attorneyServiceUrl");
			if(str != null)
				attorneyServiceUrl = str;
		}
		User user = null;
		HttpSession session = req.getSession(false);
		if(session != null){
			user = (User)session.getAttribute("user");
			if(user == null){
				String str = url+"Login";
				res.sendRedirect(str);
				return; 
			}
		}
		else{
			String str = url+"Login";
			res.sendRedirect(str);
			return; 
		}
		String [] vals;
		List<Citation> citations = null;
		AttorneyList attorneys = null;
		CiteBatch batch = new CiteBatch(debug);
		batch.setProcess_by(user.getId());
		while (values.hasMoreElements()){
			name = values.nextElement().trim();
			vals = req.getParameterValues(name);
			value = vals[vals.length-1].trim();
			
			if (name.equals("date_from")) {
				date_from=value;
				batch.setStart_date(value);
			}
			else if (name.equals("date_to")) {
				batch.setEnd_date(value);
				date_to=value;
			}
			else if (name.equals("id")) {
				batch.setId(value);
				id=value;
			}			
			else if (name.equals("process_date")) {
				process_date=value;
			}			
			else if (name.equals("action")) {
				action=value;
			}
		}
		attorneys = new AttorneyList(debug);
		String back = attorneys.handleService(attorneyServiceUrl);
		if(!back.equals("")){
			System.err.println(back);
			message += back;
		}			
		if(action.equals("Process")){ // not needed, handled by action 
			back = batch.findCitations();
			if(!back.equals("")){
				message += back;
			}
			else {
				if(batch.hasCitations()){
					//
					// save includes change citations legal action
					//
					message = batch.doSave();
					citations = batch.getCitations();
					addLogs(citations, user);
					//
					// now print them
					// CitationDups dups = new CitationDups(debug, citations);
					// back = dups.find();
					writeLetters(res,
								 citations,
								 process_date,
								 attorneys);
					return;
				}
				else{
					message = "No citation found";
				}
			}
		}
		else if(action.startsWith("Regen")){
			//
			// regenerate letters
			//
			back = batch.find();
			if(!back.equals("")){
				message += back;
			}
			else {
				if(batch.hasCitations()){
					// 
					citations = batch.getCitations();
					writeLetters(res, citations, process_date, attorneys);
					return;
				}
				else{
					message = "No citation found";
				}
			}
		}
		PrintWriter out = res.getWriter();			  
		if(!message.equals("")){
			out.println("<html><head><title>Citations</title>");
			out.println("</head><body>");
			out.println("<center>");
			out.println("<p>"+message+"</p>");
			out.println("<br />");
			out.print("</center></body></html>");
			out.close();
		}
		else{
			out.println("<html><head><title>Citations</title>");
			out.println("</head><body>");
			out.println("<center>");
			if(citations != null)
				out.println("<p>Found "+citations.size()+"</p>");
			else
				out.println("<p>No citation found</p>");				
			out.println("<br />");
			out.print("</center></body></html>");
			out.close();			
		}
    }
	/**
	 * handles the letter header
	 */
	PdfPTable getHeader(List<Attorney> attorneys){
		//
		String str = "";
		String spacer = "   ";
		//
		PdfPTable headTable = null;
		try{
			//
			// for http url use
			//
			Image image = Image.getInstance(url2+"city_logo.png");

			Font fnt = new Font(Font.TIMES_ROMAN, 10, 
								Font.NORMAL);
			Font fntb = new Font(Font.TIMES_ROMAN, 10, 
								 Font.BOLD);
			Font fnt2 = new Font(Font.TIMES_ROMAN, 12, 
								Font.NORMAL);			
			float[] widths = {33f, 34f, 33f}; // percentages
			headTable = new PdfPTable(widths);
			headTable.setWidthPercentage(100);
			headTable.getDefaultCell().setBorder(Rectangle.NO_BORDER);
			headTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
			float[] width ={33f}; 
			PdfPTable leftTable = new PdfPTable(width);
			leftTable.setWidthPercentage(33);
			leftTable.getDefaultCell().setBorder(Rectangle.NO_BORDER);
			leftTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_LEFT);
			// space
			Phrase spacePhrase = new Phrase();
			Chunk ch = new Chunk(spacer, fnt);
			spacePhrase.add(ch);
			PdfPCell cell = new PdfPCell(spacePhrase);
			//
			cell.setBorder(Rectangle.NO_BORDER);
			leftTable.addCell(cell);
			//
			Phrase phrase = new Phrase();
			ch = new Chunk("Corporation Counsel ",fntb);
			phrase.add(ch);
			cell = new PdfPCell(phrase);
			cell.setBorder(Rectangle.NO_BORDER);
			leftTable.addCell(cell);
			//
			phrase = new Phrase();
			for(Attorney one:attorneys){
				if(one.isCounsel() && one.isActive()){
					ch = new Chunk(one.getFullName(),fntb);
					phrase.add(ch);
					break;
				}
			}
			cell = new PdfPCell(phrase);
			cell.setBorder(Rectangle.NO_BORDER);
			leftTable.addCell(cell);
			//
			// space
			cell = new PdfPCell(spacePhrase);
			cell.setBorder(Rectangle.NO_BORDER);
			leftTable.addCell(cell);
			//
			phrase = new Phrase();
			ch = new Chunk("City Attorney ",fntb);
			phrase.add(ch);
			cell = new PdfPCell(phrase);
			cell.setBorder(Rectangle.NO_BORDER);
			leftTable.addCell(cell);
			//
			phrase = new Phrase();
			for(Attorney one:attorneys){
				if(one.isAttorney() && one.isActive()){
					ch = new Chunk(one.getFullName(),fntb);
					phrase.add(ch);
					break;
				}
			}			
			cell = new PdfPCell(phrase);
			cell.setBorder(Rectangle.NO_BORDER);
			leftTable.addCell(cell);
			//
			// two spaces
			cell = new PdfPCell(spacePhrase);
			cell.setBorder(Rectangle.NO_BORDER);
			leftTable.addCell(cell);
			cell = new PdfPCell(spacePhrase);
			cell.setBorder(Rectangle.NO_BORDER);
			leftTable.addCell(cell);				
			//
			// add left table to header table
			headTable.addCell(leftTable);
			//
			// Middle table
			PdfPTable midTable = new PdfPTable(width);
			midTable.setWidthPercentage(34);
			midTable.getDefaultCell().setBorder(Rectangle.NO_BORDER);
			midTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);
			// adding image
			//
			image.setWidthPercentage(33.0f);				
			cell = new PdfPCell(image);
			cell.setBorder(Rectangle.NO_BORDER);
			cell.setHorizontalAlignment(Element.ALIGN_CENTER);
			midTable.addCell(cell);
			//
			phrase = new Phrase();
			ch = new Chunk("City of Bloomington ",fntb);
			phrase.add(ch);
			cell = new PdfPCell(phrase);
			cell.setBorder(Rectangle.NO_BORDER);
			cell.setHorizontalAlignment(Element.ALIGN_CENTER);
			midTable.addCell(cell);
			phrase = new Phrase();
			ch = new Chunk("Legal Department ",fntb);
			phrase.add(ch);
			cell = new PdfPCell(phrase);
			cell.setBorder(Rectangle.NO_BORDER);
			cell.setHorizontalAlignment(Element.ALIGN_CENTER);
			midTable.addCell(cell);
			//
			// add midTable to header
			//
			headTable.addCell(midTable);
			//
			// right table
			//
			// Middle table
			PdfPTable rightTable = new PdfPTable(width);
			rightTable.setWidthPercentage(3);
			rightTable.getDefaultCell().setBorder(Rectangle.NO_BORDER);
			rightTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_RIGHT);
			cell = new PdfPCell(spacePhrase);
			cell.setBorder(Rectangle.NO_BORDER);
			rightTable.addCell(cell);
			//
			phrase = new Phrase();
			ch = new Chunk("Assistant City Attorneys",fntb);
			phrase.add(ch);
			cell = new PdfPCell(phrase);
			cell.setBorder(Rectangle.NO_BORDER);
			cell.setHorizontalAlignment(Element.ALIGN_RIGHT);				
			rightTable.addCell(cell);

			for(Attorney one:attorneys){
				if(one.isAssistant() && one.isActive()){
					phrase = new Phrase();					
					ch = new Chunk(one.getFullName(),fntb);
					phrase.add(ch);
					cell = new PdfPCell(phrase);
					cell.setBorder(Rectangle.NO_BORDER);
					cell.setHorizontalAlignment(Element.ALIGN_RIGHT);
					rightTable.addCell(cell);
				}
			}						
			// add right table to header
			headTable.addCell(rightTable);
		}
		catch(Exception ex){
			logger.error(ex);
		}
		return headTable;
	}
	//
    void writeLetters(HttpServletResponse res,
					  List<Citation> citations,
					  String process_date,
					  List<Attorney> attorneys){
		//
		// paper size legal (A4) 8.5 x 11
		// page 1-inch = 72 points
		//
		Rectangle pageSize = new Rectangle(612, 792); // 8.5" X 11"
        Document document = new Document(pageSize, 36, 36, 18, 18);
		ServletOutputStream out = null;
		PdfPTable header = getHeader(attorneys);
		Attorney paralegal = null;
		for(Attorney one:attorneys){
			if(one.isParalegal()){
				paralegal = one;
				break;
			}
		}
		try{
			ByteArrayOutputStream baos = new ByteArrayOutputStream();
			PdfWriter writer = PdfWriter.getInstance(document, baos);
			String str = "";
			document.open();
			for(Citation one:citations){
				// letter text upto cc
				String letterText = getLetterText(one);
				writeOneLetter(one, process_date,letterText, header, paralegal, document);
			}
			document.close();
			writer.close();
			res.setHeader("Expires", "0");
			res.setHeader("Cache-Control", 
						  "must-revalidate, post-check=0, pre-check=0");
			res.setHeader("Pragma", "public");
			//
			// setting the content type
			res.setContentType("application/pdf");
			//
			// the contentlength is needed for MSIE!!!
			res.setContentLength(baos.size());
			//
			out = res.getOutputStream();
			if(out != null){
				baos.writeTo(out);
			}
		}catch(Exception ex){
			logger.error(ex);
		}

	}
    void writeOneLetter(Citation one,
						String process_date,
						String letterText,
						PdfPTable header,
						Attorney paralegal,
						Document document){
		try{
			if(one.hasOwners()){
				document.add(header);
				writeOwnerLetter(letterText, one, document, process_date,paralegal);
				writeFooter(document);
				document.newPage();
			}
		}catch(Exception ex){
			logger.error(ex);
		}			
	}
	
	void writeOwnerLetter(String text,
						  Citation cite,
						  Document document,
						  String process_date,
						  Attorney paralegal){

		Owner owner = cite.getOwner();
		Font fnt = new Font(Font.TIMES_ROMAN, 12, Font.NORMAL);
		Font fntb = new Font(Font.TIMES_ROMAN, 10, Font.BOLD);			
		try{
			Phrase phrase = new Phrase();
			Chunk ch = new Chunk(process_date, fntb);
			phrase.add(ch);
			phrase.add(Chunk.NEWLINE);
			phrase.add(Chunk.NEWLINE);
			phrase.add(Chunk.NEWLINE);
			phrase.add(Chunk.NEWLINE);
			Paragraph pp = new Paragraph();
			pp.setIndentationLeft(20);
			pp.setAlignment(Element.ALIGN_LEFT);
			ch = new Chunk(Helper.initCap(owner.getFullName()), fnt);
			phrase.add(ch);
			phrase.add(Chunk.NEWLINE);
			ch = new Chunk(Helper.initCap(owner.getAddress()), fnt);
			phrase.add(ch);
			phrase.add(Chunk.NEWLINE);
			ch = new Chunk(owner.getCityStateZip(), fnt);
			phrase.add(ch);
			phrase.add(Chunk.NEWLINE);
			phrase.add(Chunk.NEWLINE);
			pp.add(phrase);
			document.add(pp);
			
			phrase = new Phrase();
			ch = new Chunk("RE: Property located at "+cite.getAddress()+", Bloomington", fnt);
			phrase.add(ch);
			phrase.add(Chunk.NEWLINE);
			phrase.add(Chunk.NEWLINE);
			ch = new Chunk("Dear Sir/Madam: ", fnt);
			phrase.add(ch);
			phrase.add(Chunk.NEWLINE);
			phrase.add(Chunk.NEWLINE);				
			document.add(phrase);
			//
			Paragraph p = new Paragraph(text, fnt);
			p.setAlignment(Element.ALIGN_LEFT);
			document.add(p);				
			//
			phrase = new Phrase();				
			ch = new Chunk("Sincerely,", fnt);
			phrase.add(ch);
			phrase.add(Chunk.NEWLINE);
			phrase.add(Chunk.NEWLINE);
			if(paralegal != null){
				ch = new Chunk(paralegal.getFullName()+", Paralegal", fnt);
				phrase.add(ch);
			}
			phrase.add(Chunk.NEWLINE);
			ch = new Chunk("cc: Department of Planning & Communication", fnt);
			phrase.add(ch);
			phrase.add(Chunk.NEWLINE);
			phrase.add(Chunk.NEWLINE);
			document.add(phrase);
		}
		catch(Exception ex){
			logger.error(ex);
		}

	}

	void writeFooter(Document document){
		Font fntb = new Font(Font.TIMES_ROMAN, 8, Font.BOLD);				
		//Create the table which will be 2 Columns wide and make it 100% of the page
		float[] widths = {33f, 34f, 33f}; 
		PdfPTable table = new PdfPTable(widths);
		table.setWidthPercentage(100.0f);
		// table.setAbsolutePosition(600, 400);
		//create a 3 cells and add them to the table
		PdfPCell cell = new PdfPCell(new Phrase("401 N Morton St * Bloomington, IN 47404", fntb));
		PdfPCell cell2 = new PdfPCell(new Phrase("City Hall\n www.bloomington.in.gov\n Email:legal@bloomington.in.gov", fntb));
		PdfPCell cell3 = new PdfPCell(new Phrase("Phone: 812-349-3426 * Fax:812-349-3441",fntb));
		cell.setBorder(Rectangle.TOP);
		cell.setHorizontalAlignment(Element.ALIGN_RIGHT);
		cell.setVerticalAlignment(Element.ALIGN_TOP);		
		cell.setPaddingTop(10);
		cell.setPaddingBottom(0);
		cell2.setBorder(Rectangle.TOP);
		cell2.setHorizontalAlignment(Element.ALIGN_CENTER);
		cell2.setVerticalAlignment(Element.ALIGN_TOP);				
		cell2.setPaddingTop(10);
		cell2.setPaddingBottom(0);
		cell3.setBorder(Rectangle.TOP);
		cell3.setHorizontalAlignment(Element.ALIGN_LEFT);
		cell3.setVerticalAlignment(Element.ALIGN_TOP);		
		cell3.setPaddingTop(10);
		cell3.setPaddingBottom(0);
		//
		//Add the three cells to the table
		//
		table.addCell(cell);
		table.addCell(cell2);
		table.addCell(cell3);
		try{
			document.add(table);
		}
		catch(Exception ex){
			logger.error(ex);
		}
	}
	/**
	 * add an entry to the log file
	 */
	void addLogs(List<Citation> citations, User user){
		for(Citation one:citations){
			CiteLog clg = new CiteLog(debug,
									  user,
									  one,
									  "legal action updated by Sendout batch");
		}
	}
	//
	String  getLetterText(Citation citation){
		
		String text = "";
		String type = "";
		if(citation.getViolation() != null){
			type = citation.getViolation().getName();
		}
		String fine = citation.getAmount();
		String id = citation.getId();
		text = "This office has received a referral from the Department of Planning and Communication regarding your failure to pay Citation # "+id+" for "+type+" at the above referenced property. The total amount owed is $"+fine+".\n\n";
		
		text += "Your failure to make payment within fourteen (14) days of the date of this letter will result in our office forwarding this matter to a collection agency to recover any outstanding debt. ";
		
		text += "Please remit payment in the form of a money order or check made payable to the City of Bloomington. Your payment should be sent to the following address: City of Bloomington, Planning & Communication, 401 North Morton Street, P.O. Box 100, Bloomington, Indiana 47402. Please reference the above-noted Citation # on any payment you submit.\n\n";

		text += "Thank you in advance for your prompt attention to this matter.\n\n";

		return text;
	}
	//
	// for list of citations for the same owner
	//
	String  getLetterText(List<Citation> citations){
		String text = "";
		Hashtable<String, String> idHash = new Hashtable<String, String>(2);
		Hashtable<String, String> fineHash = new Hashtable<String, String>(2);
		//
		// TODO change types
		//
		String[] types = {"trash","snow","excessive","cans"};
		for(Citation one:citations){
			String type = one.getViolation().getName().toLowerCase();
			String fine = one.getAmount();
			String id = one.getId();
			for(String str:types){
				if(type.startsWith(str)){
					if(idHash.containsKey(str)){
						String old_id = idHash.get(str);
						if(!old_id.equals("")){
							old_id +=" and ";
						}
						old_id += id;
						idHash.put(str, old_id);
						String old_fine = fineHash.get(str);
						if(!old_fine.equals("")){
							old_fine +=" and ";
						}
						old_fine += "$"+fine;
						fineHash.put(str, old_fine);
					}
					else{
						idHash.put(str,id);
						fineHash.put(str,fine);
					}
					continue;
				}
			}
		}
		for(String type:types){
			if(!idHash.containsKey(type)) continue;
			String ids = idHash.get(type);
			String fines = fineHash.get(type);
			String is = "is";
			if(fines.indexOf("and") > -1){
				is = "are";
			}
			if(type.equals("trash")){
				text += "This office has received a referral from the Department of Planning and Communication regarding your failure to pay Citation # "+ids+" for trash at the above referenced property. The total amount owed "+is+" $"+fines+".\n";
			}
			else if(type.equals("snow")){
				text += "This office has received a referral from the Department of Planning and Communication regarding your failure to pay Citation # "+ids+" for failure to remove snow at the above referenced property. The total amount owed "+is+" $"+fines+".\n";
			}
			else if(type.startsWith("excessive")){
				text += "This office has received a referral from the Department of Planning and Communication regarding your failure to pay Citation # "+ids+" for excessive growth at the above referenced property. The total amount owed "+is+" $"+fines+".\n";
			}
			else if(type.startsWith("cans")){
				text += "This office has received a referral from the Department of Planning and Communication regarding your failure to pay Citation # "+ids+" for leaving trash cans at the curb at the above referenced property. The total amount owed "+is+" $"+fines+".\n";
			}
		}
		text += "Your failure to make payment within fourteen (14) days of the date of this letter will result in our office forwarding this matter to a collection agency to recover any outstanding debt. ";
		text += "Please remit payment in the form of a money order or check made payable to the City of Bloomington. Your payment should be sent to the following address: City of Bloomington, Planning & Communication, 401 North Morton Street, P.O. Box 100, Bloomington, Indiana 47402. Please reference the above-noted Citation # on any payment you submit.\n\n";

		text += "Thank you in advance for your prompt attention to this matter.\n";

		return text;
	}	
}






















































